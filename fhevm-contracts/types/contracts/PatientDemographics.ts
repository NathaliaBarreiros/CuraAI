/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PatientDemographicsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ageGroup15_20"
      | "ageGroup21_30"
      | "ageGroup31_40"
      | "ageGroup41_50"
      | "ageGroup51_60"
      | "ageGroup61Plus"
      | "argentinaCount"
      | "brasilCount"
      | "canadaCount"
      | "ecuadorCount"
      | "femaleCount"
      | "franciaCount"
      | "getCountryStatistics"
      | "getMyEncryptedData"
      | "getStatistics"
      | "hasPatientData"
      | "maleCount"
      | "nonBinaryCount"
      | "preferNotToSayCount"
      | "submitPatientData"
      | "totalPatients"
      | "usCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PatientDataSubmitted" | "StatisticsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ageGroup15_20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ageGroup21_30",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ageGroup31_40",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ageGroup41_50",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ageGroup51_60",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ageGroup61Plus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "argentinaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "brasilCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canadaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ecuadorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "femaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "franciaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEncryptedData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPatientData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maleCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonBinaryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preferNotToSayCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitPatientData",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPatients",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usCount", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ageGroup15_20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ageGroup21_30",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ageGroup31_40",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ageGroup41_50",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ageGroup51_60",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ageGroup61Plus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "argentinaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brasilCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canadaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecuadorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "femaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "franciaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountryStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEncryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPatientData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maleCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonBinaryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preferNotToSayCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPatientData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usCount", data: BytesLike): Result;
}

export namespace PatientDataSubmittedEvent {
  export type InputTuple = [patient: AddressLike];
  export type OutputTuple = [patient: string];
  export interface OutputObject {
    patient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatisticsUpdatedEvent {
  export type InputTuple = [totalPatients: BigNumberish];
  export type OutputTuple = [totalPatients: bigint];
  export interface OutputObject {
    totalPatients: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PatientDemographics extends BaseContract {
  connect(runner?: ContractRunner | null): PatientDemographics;
  waitForDeployment(): Promise<this>;

  interface: PatientDemographicsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ageGroup15_20: TypedContractMethod<[], [string], "view">;

  ageGroup21_30: TypedContractMethod<[], [string], "view">;

  ageGroup31_40: TypedContractMethod<[], [string], "view">;

  ageGroup41_50: TypedContractMethod<[], [string], "view">;

  ageGroup51_60: TypedContractMethod<[], [string], "view">;

  ageGroup61Plus: TypedContractMethod<[], [string], "view">;

  argentinaCount: TypedContractMethod<[], [string], "view">;

  brasilCount: TypedContractMethod<[], [string], "view">;

  canadaCount: TypedContractMethod<[], [string], "view">;

  ecuadorCount: TypedContractMethod<[], [string], "view">;

  femaleCount: TypedContractMethod<[], [string], "view">;

  franciaCount: TypedContractMethod<[], [string], "view">;

  getCountryStatistics: TypedContractMethod<
    [],
    [
      [string, string, string, string, string, string] & {
        ecuador: string;
        argentina: string;
        brasil: string;
        us: string;
        canada: string;
        francia: string;
      }
    ],
    "view"
  >;

  getMyEncryptedData: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        age: string;
        gender: string;
        countryCode: string;
      }
    ],
    "view"
  >;

  getStatistics: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        total: string;
        females: string;
        males: string;
        nonBinary: string;
        preferNotToSay: string;
        age15_20: string;
        age21_30: string;
        age31_40: string;
        age41_50: string;
        age51_60: string;
        age61Plus: string;
      }
    ],
    "view"
  >;

  hasPatientData: TypedContractMethod<
    [patientAddr: AddressLike],
    [boolean],
    "view"
  >;

  maleCount: TypedContractMethod<[], [string], "view">;

  nonBinaryCount: TypedContractMethod<[], [string], "view">;

  preferNotToSayCount: TypedContractMethod<[], [string], "view">;

  submitPatientData: TypedContractMethod<
    [
      encryptedAge: BytesLike,
      ageProof: BytesLike,
      encryptedGender: BytesLike,
      genderProof: BytesLike,
      encryptedCountryCode: BytesLike,
      countryProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  totalPatients: TypedContractMethod<[], [string], "view">;

  usCount: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ageGroup15_20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ageGroup21_30"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ageGroup31_40"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ageGroup41_50"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ageGroup51_60"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ageGroup61Plus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "argentinaCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "brasilCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canadaCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ecuadorCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "femaleCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "franciaCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCountryStatistics"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string, string, string] & {
        ecuador: string;
        argentina: string;
        brasil: string;
        us: string;
        canada: string;
        francia: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyEncryptedData"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        age: string;
        gender: string;
        countryCode: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStatistics"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        total: string;
        females: string;
        males: string;
        nonBinary: string;
        preferNotToSay: string;
        age15_20: string;
        age21_30: string;
        age31_40: string;
        age41_50: string;
        age51_60: string;
        age61Plus: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPatientData"
  ): TypedContractMethod<[patientAddr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maleCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonBinaryCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "preferNotToSayCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitPatientData"
  ): TypedContractMethod<
    [
      encryptedAge: BytesLike,
      ageProof: BytesLike,
      encryptedGender: BytesLike,
      genderProof: BytesLike,
      encryptedCountryCode: BytesLike,
      countryProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalPatients"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usCount"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "PatientDataSubmitted"
  ): TypedContractEvent<
    PatientDataSubmittedEvent.InputTuple,
    PatientDataSubmittedEvent.OutputTuple,
    PatientDataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "StatisticsUpdated"
  ): TypedContractEvent<
    StatisticsUpdatedEvent.InputTuple,
    StatisticsUpdatedEvent.OutputTuple,
    StatisticsUpdatedEvent.OutputObject
  >;

  filters: {
    "PatientDataSubmitted(address)": TypedContractEvent<
      PatientDataSubmittedEvent.InputTuple,
      PatientDataSubmittedEvent.OutputTuple,
      PatientDataSubmittedEvent.OutputObject
    >;
    PatientDataSubmitted: TypedContractEvent<
      PatientDataSubmittedEvent.InputTuple,
      PatientDataSubmittedEvent.OutputTuple,
      PatientDataSubmittedEvent.OutputObject
    >;

    "StatisticsUpdated(uint32)": TypedContractEvent<
      StatisticsUpdatedEvent.InputTuple,
      StatisticsUpdatedEvent.OutputTuple,
      StatisticsUpdatedEvent.OutputObject
    >;
    StatisticsUpdated: TypedContractEvent<
      StatisticsUpdatedEvent.InputTuple,
      StatisticsUpdatedEvent.OutputTuple,
      StatisticsUpdatedEvent.OutputObject
    >;
  };
}
